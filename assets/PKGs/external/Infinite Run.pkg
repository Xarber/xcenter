{"type":"Game","title":"Infinite Run","desc":"Get the highest score you can trying to avoid the obstacles!","author":"Eduardo Lopes","src":"/assets/media/apps/external/infiniterun.png","id":"Infinite RunDKD87LHWHK","batch":"","content":"  <div id=\"container\">\n  \t\n  </div> \n\n<div class=\"controlls\">\n\t<p>Jump: <b>CLICK</b> or <b>SPACE</b> or <b>UP</b> or <b>W</b> (Hold to jump higher)</p>\n  <p>(<b>TOUCH</b> works as well, but the game it's not responsive).</p>\n<p></p>\n</div>\n\n<script type=\"text/javascript\">\nclass Game {\n\n    constructor() {\n        this.score = 0;\n        this.isRunning = 0; // game is not running\n\n        this.calculateScale();\n\n        this.timeline = new TimelineMax({smoothChildTiming: true});\n        this.time = 1.6; // initial speed\n        this.colors = [\"#FF4571\", \"#FFD145\", \"#8260F6\"]; // the 3 colors used in the game\n        this.colorsRGBA = [\"rgba(255, 69, 113, 1)\", \"rgba(255, 69, 113, 1)\", \"rgba(255, 69, 113, 1)\"];\n        this.color = this.colors[0]; // the intial color of the ball\n        this.prevColor = null; // used as a holder to prevent ball colors from repeating\n    }\n\n    /**\n     * The game screen is scalable. I took 1200x800px as the initial scale.\n     * In order to display the game an many screen sizes properly\n     * I have to compare the player's sreen size to the initial scale,\n     * then scale the game using CSS Transform to fit the screen properly\n     * The function is called in the controller and anywhere where I need\n     * to recalculate the scale on screen resize or device rotation\n     */\n    calculateScale() {\n        this.screen = $(window).width(); // screen width\n        this.screenHeight = $(window).height();\n        this.scale = (this.screen > this.screenHeight) ? this.screenHeight/800 : this.screen/1200;\n        this.stickWidth = 180*this.scale;\n        this.steps = this.screen/this.stickWidth; // how many steps (stick width + margin) it takes from one end to another\n    }\n\n    /**\n     * Creating as many sticks we need to fill the screen\n     * from start to end of the screen. The steps property is used for that\n     */\n    generateSticks() {\n        let numberOfSticks = Math.ceil(this.steps);\n        for(let i = 0; i <= numberOfSticks; i++)\n            new Stick();\n    }\n\n    generateBall() {\n        this.balltween = new TimelineMax({repeat: -1, paused: 1});\n        $('.scene .ball-holder').append('<div class=\"ball red\" id=\"ball\"></div>');\n        this.bounce();\n    }\n\n    generateTweet() {\n        let top = $(window).height() / 2 - 150;\n        let left = $(window).width() / 2 - 300;\n        window.open(\"https://twitter.com/intent/tweet?url=https://codepen.io/gregh/full/yVLOyO&amp;text=I scored \"+ this.score +\" points on Coloron! Can you beat my score?&amp;via=greghvns&amp;hashtags=coloron\", \"TweetWindow\", \"width=600px,height=300px,top=\" + top + \",left=\" + left);\n    }\n\n    /**\n     * The greeting when the game begins\n     */\n    intro() {\n\n        TweenMax.killAll();\n      \n        //TweenMax.to('.splash', 0.3, { opacity: 0, display: 'none', delay: 1 })\n\n        $('.stop-game').css('display', 'none');\n        $('.start-game').css('display', 'flex');\n\n        let introTl = new TimelineMax();\n        let ball = new TimelineMax({repeat: -1, delay: 3});\n        introTl\n            .fromTo('.start-game .logo-holder', 0.9, { opacity: 0 }, { opacity: 1 })\n            .staggerFromTo('.start-game .logo span', 0.5, { opacity: 0 }, { opacity: 1 }, 0.08)\n            .staggerFromTo('.start-game .bar', 1.6, { y: '+100%' }, { y: '0%', ease: Elastic.easeOut.config(1, 0.3) }, 0.08)\n            .staggerFromTo('.start-game .ball-demo', 1, { scale: 0 }, { scale: 1, ease: Elastic.easeOut.config(1, 0.3) }, 0.8, 2)\n\n\n        ball.fromTo('.start-game .section-1 .ball-demo', 0.5, { y: \"0px\" }, { y: \"100px\", scaleY: 1.1, transformOrigin: \"bottom\", ease: Power2.easeIn})\n            .to('.start-game .section-1 .ball-demo', 0.5, { y: \"0px\", scaleY: 1, transformOrigin: \"bottom\", ease: Power2.easeOut,  \n                    onStart: () => {\n                        while(this.prevColor==this.color) {\n                            this.color = (new Color).getRandomColor();\n                        }\n                        this.prevColor = this.color;\n                        TweenMax.to('.start-game .section-1 .ball-demo', 0.5, {backgroundColor: this.color});\n                    } \n                });\n    }\n\n    /**\n    * Display score\n     */\n    showResult() {\n        let score = this.score;\n        $('.stop-game').css('display', 'flex');\n        $('.stop-game .final-score').text(score + '!');\n        $('.stop-game .result').text(this.showGrade(score));\n        $('.nominee').show();\n\n        let resultTimeline = new TimelineMax();\n        resultTimeline\n            .fromTo('.stop-game .score-container', 0.7, { opacity: 0, scale: 0.3 }, { opacity: 1, scale: 1, ease: Elastic.easeOut.config(1.25, 0.5)})\n            .fromTo('.stop-game .final-score', 2, { scale: 0.5 }, { scale: 1, ease: Elastic.easeOut.config(2, 0.5)}, 0)\n            .fromTo('.stop-game .result', 1, { scale: 0.5 }, { scale: 1, ease: Elastic.easeOut.config(1.5, 0.5)}, 0.3)\n            ;\n\n    }\n\n    /**\n     * Takes players score and generates the cheering copy\n     * @param  {int} score\n     * @return {string} grade\n     */\n    showGrade(score) {\n        if(score > 30) return \"Chuck Norris?\";\n        else if(score > 25) return \"You're da man\";\n        else if(score > 20) return \"Awesome\";\n        else if(score > 15) return \"Great!\";\n        else if(score > 13) return \"Nice!\";\n        else if(score > 10) return \"Good Job!\";\n        else if(score > 5) return \"Really?\";\n        else return \"Poor...\";\n    }\n\n    start() {\n\n        this.stop(); // stop the game\n\n        $('.start-game, .stop-game').css('display', 'none'); // hide all the popups\n        $('.nominee').hide();\n\n        new Game();\n        this.score = 0; // reset\n\n        this.isRunning = 1;\n\n        // Clean up the stick and ball holders\n        // and generate new ones\n        $('#sticks, .scene .ball-holder').html('');\n        $('#score').text(this.score);\n        this.generateSticks();\n        this.generateBall();\n\n        // disables scene animations for Phones\n        if( !/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(window.navigator.userAgent) ) {\n            Animation.sceneAnimation();\n        }\n        this.moveToStart();\n        this.moveScene();\n\n        // reset timescale to normal as the game speeds up\n        this.timeline.timeScale(1);\n        this.balltween.timeScale(1);\n    }\n\n    stop() {\n\n        this.isRunning = 0;\n\n        $('.start-game, .stop-game').css('display', 'none');\n        $('#sticks, .scene .ball-holder, #score').html('');\n        TweenMax.killAll();\n        \n        this.showResult();\n    }\n\n    scaleScreen() {\n\n        TweenMax.killAll(); // prevent multiple calls on resize\n\n        let height = $(window).height();\n        let width = $(window).width();\n\n        this.calculateScale();\n\n        $('.container')\n                .css('transform', 'scale(' + this.scale + ')')\n                .css('height', height/this.scale)\n                .css('width', width/this.scale)\n                .css('transformOrigin', 'left top');\n\n        $('#sticks').width(this.screen/this.scale + 3 * this.stickWidth/this.scale);\n\n    }\n\n    /**\n     * Calls the above function\n     * If the game is running it stops and shows the score\n     * If the game has stops it takes player to the main menu\n     */\n    scaleScreenAndRun() {\n\n        this.scaleScreen();\n\n        if(this.isRunning) {\n            this.stop();\n        } else {\n            this.intro();\n        }\n\n    }\n\n    /**\n     * This is the initial animation\n     * where the sticks come to the starting position\n     * and the ball appears and falls down\n     */\n    moveToStart() {        \n\n        let tip = new TimelineMax({ delay: 2 });\n\n        tip\n            .fromTo('.learn-to-play', 1, { scale: 0 }, { scale: 1, opacity: 1, ease: Elastic.easeOut.config(1.25, 0.5) })\n            .to('.learn-to-play', 1, { scale: 0, opacity: 0, ease: Elastic.easeOut.config(1.25, 0.5) }, 3)\n\n        TweenMax.fromTo('#ball', this.time,\n                        { \n                            scale: 0 \n                        },\n                        { \n                            scale: 1,\n                            delay: this.time * ((this.steps - 3) - 1.5), \n                            onComplete: () => {\n                                this.balltween.play();\n                            }\n                        });\n\n        this.timeline.add(\n            TweenMax.fromTo('#sticks', this.time * this.steps, { x: this.screen / this.scale }, { x: 0, ease: Power0.easeNone})\n        );\n    }\n\n    /**\n     * The animation that moves sticks\n     */\n    moveScene() {\n\n        this.timeline.add(\n            TweenMax.to('#sticks', this.time, { x: '-=180px', ease: Power0.easeNone, repeat: -1, onRepeat: () => { this.rearrange() } })\n        );\n\n    }  \n\n    /**\n     * removes the first stick and adds one the the end\n     * this gives the sticks an infinite movement\n     */\n    rearrange() {\n\n        let scale = this.speedUp();\n\n        this.timeline.timeScale(scale);\n        this.balltween.timeScale(scale);\n\n        $('#sticks .stick').first().remove();\n        new Stick();\n\n    }\n\n    /**\n     * The game speeds up based on score\n     * The GSAP timeScale() function is called on the timeline to speed up the game\n     * This calculates how much shall the game speed up\n     */\n    speedUp() {\n        if(this.score > 30) {\n            return 1.8;\n        }\n        if(this.score > 20) {\n            return 1.7;\n        }\n        if(this.score > 15) {\n            return 1.5;\n        }\n        else if(this.score > 12) {\n            return 1.4;\n        }\n        else if(this.score > 10) {\n            return 1.3;\n        }\n        else if(this.score > 8) {\n            return 1.2;\n        }\n        else if(this.score > 5) {\n            return 1.1;\n        }\n        return 1;\n    }\n\n    /**\n     * Ball bouncing animation\n     * It checks if the ball and stick colors match\n     * And changes the ball color\n     */\n    bounce() {\n\n        this.balltween\n                .to('#ball', this.time/2, {y: '+=250px', scaleY: 0.7, transformOrigin: \"bottom\", ease: Power2.easeIn,\n                    onComplete: () => {\n                        this.checkColor();\n                    }\n                }).to('#ball', this.time/2, {y: '-=250px', scaleY: 1.1, transformOrigin: \"bottom\", ease: Power2.easeOut, \n                    onStart: () => {\n                        while(this.prevColor==this.color) {\n                            this.color = (new Color).getRandomColor();\n                        }\n                        this.prevColor = this.color;\n                        TweenMax.to('#ball', 0.5, {backgroundColor: this.color});\n                        $('#ball').removeClass('red')\n                                  .removeClass('yellow')\n                                  .removeClass('purple')\n                                  .addClass((new Color).colorcodeToName(this.color));\n                    }\n                })    \n    }    \n\n    checkColor() {\n\n        let ballPos = $('#ball').offset().left + $('#ball').width()/2;\n        let stickWidth = $('.stick').width();\n        let score = this.score;\n\n        $('#sticks .stick').each(function(){\n            if($(this).offset().left < ballPos && $(this).offset().left > (ballPos - stickWidth)) {\n                \n                if( Color.getColorFromClass($(this)) == Color.getColorFromClass('#ball') ) {\n                    // if matches increase the score\n                    score++;\n                    $('#score').text(score);\n                    TweenMax.fromTo('#score', 0.5, { scale: 1.5 }, { scale: 1, ease: Elastic.easeOut.config(1.5, 0.5) });\n                } else {\n\n                    // you loose\n                    game.stop();\n\n                }\n\n            }\n        })\n\n        this.score = score;\n    }\n\n}\n\nclass Stick {\n\n    constructor() {\n        this.stick = this.addStick();\n    }\n\n    addStick() {\n        this.stick = $('#sticks').append('<div class=\"stick inactive\"></div>');\n        return this.stick;\n    }\n\n}\n\nclass Color {\n\n    constructor() {\n        this.colors = [\"#FF4571\", \"#FFD145\", \"#8260F6\"];\n        this.effects = [\"bubble\", \"triangle\", \"block\"];\n        this.prevEffect = null;\n    }\n\n    getRandomColor() {\n        let colorIndex = Math.random()*3;\n        let color = this.colors[Math.floor(colorIndex)];\n        return color;\n    } \n\n    colorcodeToName(color) {\n        let colors = [\"#FF4571\", \"#FFD145\", \"#8260F6\"];\n        let names = [\"red\", \"yellow\", \"purple\"];\n        let index = colors.indexOf(color);\n        if(index == -1) return false;\n        return names[index];\n    }      \n\n    /**\n     * Changes the color of an element\n     * As we as adds verbal name of the color\n     */\n    changeColor(el) {\n        let index = el.data(\"index\");\n        if(index===undefined) { index = 0; }\n        else { index += 1; }\n        if(index==3) index = 0;\n        el\n            .css('background-color', this.colors[index])\n            .data('index', index);\n\n        el.removeClass('red')\n          .removeClass('yellow')\n          .removeClass('purple')\n          .addClass(this.colorcodeToName(this.colors[index]));\n\n        if(el.hasClass('inactive')) {\n            this.setEffect(el);\n            el.addClass('no-effect');\n        }\n        \n        el.removeClass('inactive');\n    }\n\n    getRandomEffect() {\n        let effectIndex = null;\n        \n        effectIndex = Math.floor(Math.random()*3);\n        while(effectIndex == this.prevEffect) {\n            effectIndex = Math.floor(Math.random()*3);\n        }\n\n        this.prevEffect = effectIndex;\n        return this.effects[effectIndex];\n    }   \n\n    /**\n     * Adds the effect specific particles to the stick\n     */\n    setEffect(el) {\n        let effect = this.getRandomEffect();\n        el.addClass(effect + '-stick');\n        for(let i = 1; i <= 14; i++) {\n            if(effect=='block') {\n                el.append(`<div class=\"${effect} ${effect}-${i}\"><div class=\"inner\"></div><div class=\"inner inner-2\"></div></div>`);\n            } else {\n                el.append(`<div class=\"${effect} ${effect}-${i}\"></div>`);\n            }\n        }\n    }\n\n    /**\n     * Since the ball and sticks have several classes\n     * This method searches for the color class\n     * @param el [DOM element]\n     * @return {string} class name\n     */\n    static getColorFromClass(el) {\n        let classes = $(el).attr('class').split(/\\s+/);\n        for (var i = 0, len = classes.length; i < len; i++) {          \n            if(classes[i] == 'red' || classes[i] == 'yellow' || classes[i] == 'purple') {\n                return classes[i];\n            }\n        }\n    }\n}\n\nclass Animation {\n\n    /**\n     * Creates and positions the small glow elements on the screen\n     */\n    static generateSmallGlows(number) {\n        let h = $(window).height();\n        let w = $(window).width();\n        let scale = (w > h) ? h/800 : w/1200;\n\n        h = h/scale;\n        w = w/scale;\n\n        for(let i = 0; i < number; i++) {\n            let left = Math.floor(Math.random()*w);\n            let top = Math.floor(Math.random()*(h/2));\n            let size = Math.floor(Math.random()*8) + 4;\n            $('.small-glows').prepend('<div class=\"small-glow\"></div>');\n            let noise = $('.small-glows .small-glow').first();\n            noise.css({left: left, top: top, height: size, width: size});\n        }\n    }\n\n    /**\n     * Creates the animations for sticks\n     * The effects is chosen by random\n     * And one of the three functions is\n     * Called accordingly\n     */\n    playBubble(el) {\n        let bubble = new TimelineMax();\n        bubble.staggerFromTo(el.find('.bubble'), 0.3, {scale: 0.1}, {scale: 1}, 0.03)\n        bubble.staggerTo(el.find('.bubble'), 0.5, {y: '-=60px', yoyo: true, repeat: -1}, 0.03);\n    }\n\n    playTriangle(el) {\n        let triangle = new TimelineMax();\n        triangle.staggerFromTo(el.find('.triangle'), 0.3, {scale: 0.1}, {scale: 1}, 0.03)\n                .staggerTo(el.find('.triangle'), 1.5, {\n                    cycle:{\n                        rotationY: [0, 360],\n                        rotationX: [360, 0],\n                    },\n                    repeat: -1,\n                    repeatDelay: 0.1\n                }, 0.1);\n    }\n\n    playBlock(el) {\n        let block = new TimelineMax();\n        let block2 = new TimelineMax({delay: 0.69});\n\n        block.staggerFromTo(el.find('.block'), 0.3, {scale: 0.1}, {scale: 1}, 0.03)\n             .staggerTo(el.find('.block .inner:not(.inner-2)'), 1, {\n                    cycle: {\n                        x: [\"+200%\", \"-200%\"]\n                    },\n                    repeat: -1,\n                    repeatDelay: 0.6,\n                }, 0.1);\n        block2.staggerTo(el.find('.block .inner-2'), 1, {\n                    cycle: {\n                        x: [\"+200%\", \"-200%\"]\n                    },\n                    repeat: -1,\n                    repeatDelay: 0.6,\n                }, 0.1);\n    }\n\n    static sceneAnimation() {\n\n        const speed = 15; // uses it's local speed\n\n        // animates the small glows in a circular motion\n        $('.small-glow').each(function(){\n            let speedDelta = Math.floor(Math.random()*8);\n            let radius = Math.floor(Math.random()*20)+20;\n            TweenMax.to($(this), speed+speedDelta, {rotation: 360, transformOrigin: \"-\"+radius+\"px -\"+radius+\"px\", repeat: -1, ease: Power0.easeNone});\n        })\n\n        var wavet = TweenMax.to('.top_wave', speed*1.7/42, {backgroundPositionX: '-=54px', repeat: -1, ease: Power0.easeNone});\n        var wave1 = TweenMax.to('.wave1', speed*1.9/42, {backgroundPositionX: '-=54px', repeat: -1, ease: Power0.easeNone});\n        var wave2 = TweenMax.to('.wave2', speed*2/42, {backgroundPositionX: '-=54px', repeat: -1, ease: Power0.easeNone});\n        var wave3 = TweenMax.to('.wave3', speed*2.2/42, {backgroundPositionX: '-=54px', repeat: -1, ease: Power0.easeNone});\n        var wave4 = TweenMax.to('.wave4', speed*2.4/42, {backgroundPositionX: '-=54px', repeat: -1, ease: Power0.easeNone});\n\n        var mount1 = TweenMax.to('.mount1', speed*8, {backgroundPositionX: '-=1760px', repeat: -1, ease: Power0.easeNone});\n        var mount2 = TweenMax.to('.mount2', speed*10, {backgroundPositionX: '-=1782px', repeat: -1, ease: Power0.easeNone});\n\n        var clouds = TweenMax.to('.clouds', speed*3, {backgroundPositionX: '-=1001px', repeat: -1, ease: Power0.easeNone});   \n\n    }\n\n}\n\n            var game = new Game();\n            var animation = new Animation();\n            var color = new Color();\n            var userAgent = window.navigator.userAgent;\n\n            Animation.generateSmallGlows(20);\n\n            $(document).ready(function(){\n                //game.showResult();\n                game.scaleScreen();\n                game.intro();\n                //game.start();\n                //game.bounce();\n                \n                if($(window).height() < 480) {\n                    $('.play-full-page').css('display', 'block');\n                }\n            })\n\n            $(document).on('click', '.stick', function(){\n                color.changeColor($(this));\n                if($(this).hasClass('no-effect')) {\n                    if($(this).hasClass('bubble-stick')) {\n                        animation.playBubble($(this));\n                    } else if($(this).hasClass('triangle-stick')) {\n                        animation.playTriangle($(this));\n                    } else if($(this).hasClass('block-stick')) {\n                        animation.playBlock($(this));\n                    }\n                    $(this).removeClass('no-effect');\n                }\n            });\n\n            $(document).on('click', '.section-2 .bar', function(){\n                color.changeColor($(this));\n            });\n\n            $(window).resize(function(){\n                if (!userAgent.match(/iPad/i) && !userAgent.match(/iPhone/i)) {\n                    game.scaleScreenAndRun();\n                }\n            });\n\n            $(window).on(\"orientationchange\",function(){\n                game.scaleScreenAndRun();\n            });\n</script><style>@mixin bubble_shape ($width: 4px) {\n    border-radius: 50%;\n    position: absolute;\n    background-color: rgba(0, 0, 0, 0.12);\n    border-color: rgba(0, 0, 0, 0.12);\n    border-width: $width;\n}\n\n@mixin bubble ($size, $top, $left) {\n    height: $size;\n    width: $size;\n    top: $top;\n    left: $left;\n}\n\n@mixin bubble_hollow ($size, $top, $left) {\n    @include bubble ($size, $top, $left);\n    background-color: transparent;\n    border-style: solid;\n}\n\n@mixin triangle ($height, $width, $top, $left) {\n    border-left: ($height/2) solid transparent;\n    border-right: ($height/2) solid transparent;\n    border-bottom: $width solid rgba(0, 0, 0, 0.12);\n    background-color: transparent;\n    left: $left;\n    top: $top;\n}\n\n@mixin triangle_hollow ($height, $width, $top, $left) {\n    @include triangle( $height, $width, $top, $left );\n    &:after {    \n        content: \" \";\n        display: block;\n        position: absolute;\n        border-left: ($height/4-1) solid transparent;\n        border-right: ($height/4-1) solid transparent;\n        border-bottom: ($height/2-3) solid transparent;\n        top: 6px;\n        left: -($width/4);\n        transition: border-bottom-color 0.4s ease;\n\n        .red & {\n            border-bottom-color: #fc5c82;\n        }\n        .yellow & {\n            border-bottom-color: #fcd45c;\n        }\n        .purple & {\n            border-bottom-color: #9174f5;\n        }\n    }\n}\n\n@mixin block ($height, $width, $top, $left) {\n    height: $height;\n    width: $width;\n    top: $top;\n    left: $left;\n}\n\n@mixin block_hollow ($height, $width, $top, $left) {\n    @include block ($height, $width, $top, $left);\n    & .inner {\n        background-color: transparent !important;\n        border-style: solid;\n        box-sizing: border-box;\n    }\n}\n\n.bubble {\n    @include bubble_shape;\n}\n.bubble-1 {\n    @include bubble(15px, 21px, 59px);\n}\n.bubble-2 {\n    @include bubble(27px, 36px, 16px);\n}\n.bubble-3 {\n    @include bubble(21px, 63px, 49px);\n}\n.bubble-4 {\n    @include bubble(15px, 98px, 37px);\n}\n.bubble-5 {\n    @include bubble_hollow(5px, 116px, 20px);\n}\n.bubble-6 {\n    @include bubble(6px, 128px, 63px);\n}\n.bubble-7 {\n    @include bubble(27px, 150px, 52px);\n}\n.bubble-8 {\n    @include bubble(19px, 154px, 18px);\n}\n.bubble-9 {\n    @include bubble(10px, 189px, 13px);\n}\n.bubble-10 {\n    @include bubble_hollow(5px, 199px, 52px);\n}\n.bubble-11 {\n    @include bubble(21px, 220px, 29px);\n}\n.bubble-12 {\n    @include bubble(21px, 263px, 48px);\n}\n.bubble-13 {\n    @include bubble_hollow(5px, 275px, 16px);\n}\n.bubble-14 {\n    @include bubble(15px, 296px, 34px);\n}\n.triangle {\n    position: absolute;\n    background-color: rgba(0, 0, 0, 0.12);\n    border-color: rgba(0, 0, 0, 0.12);\n}\n.triangle-1 {\n    @include bubble_shape;\n    @include bubble(10px, 22px, 55px);\n}\n.triangle-2 {\n    @include triangle_hollow(16px, 14px, 27px, 15px);\n}\n.triangle-3 {\n    @include triangle_hollow(24px, 19px, 60px, 43px);\n}\n.triangle-4 {\n    @include bubble_shape(3px);\n    @include bubble_hollow(8px, 61px, 17px);\n}\n.triangle-5 {\n    @include triangle(10px, 8px, 101px, 25px);\n    transform: rotate(180deg);\n}\n\n.triangle-6 {\n    @include triangle(8px, 6px, 103px, 60px);\n    transform: rotate(-90deg);\n}\n\n.triangle-7 {\n    @include triangle(25px, 19px, 126px, 17px);\n    transform: rotate(180deg);\n}\n\n.triangle-8 {\n    @include triangle(21px, 16px, 149px, 50px);\n}\n\n.triangle-9 {\n    @include triangle(11px, 8px, 177px, 21px);\n}\n\n.triangle-10 {\n    @include bubble_shape;\n    @include bubble(10px, 177px, 60px);\n}\n\n.triangle-11 {\n    @include triangle(18px, 13px, 213px, 33px);\n    transform: rotate(180deg);\n}\n\n.triangle-12 {\n    @include bubble_shape(2px);\n    @include bubble_hollow(10px, 233px, 65px);\n}\n\n.triangle-13 {\n    @include bubble_shape;\n    @include bubble(10px, 250px, 22px);\n}\n\n.triangle-14 {\n    @include triangle_hollow(16px, 14px, 270px, 45px);\n    transform: rotate(180deg);\n}\n\n.stick {\n    .block {\n        position: absolute;\n        overflow: hidden;\n        z-index: 999;\n        border-radius: 7px;\n        .inner {\n            border-radius: 7px;\n            background-color: rgba(0, 0, 0, 0.12);\n            border-color: rgba(0, 0, 0, 0.12);\n            border-width: 3px;\n            height: 100%;\n            width: 100%;\n            position: absolute;\n        }\n        &:nth-child(2n+1) .inner-2 {\n            left: -200%;\n        }\n        &:nth-child(2n+2) .inner-2 {\n            left: 200%;\n        }\n    }\n    .block-1 {\n        @include block_hollow(16px, 31px, 16px, 30px);\n    }\n    .block-2 {\n        @include block(14px, 42px, 50px, 15px);\n    }\n    .block-3 {\n        @include block(18px, 9px, 73px, 64px);\n    }\n    .block-4 {\n        @include block(9px, 14px, 84px, 26px);\n    }\n    .block-5 {\n        @include block(15px, 15px, 109px, 45px);\n        .inner { \n            border-radius: 50%;\n        }\n    }\n    .block-6 {\n        @include block(9px, 27px, 135px, 19px);\n    }\n    .block-7 {\n        @include block(12px, 12px, 144px, 60px); \n        .inner { \n            border-radius: 50%;\n            border-style: solid;\n            box-sizing: border-box;\n            background-color: transparent;\n        }\n    }\n    .block-8 {\n        @include block(27px, 14px, 164px, 24px);\n    }\n    .block-9 {\n        @include block(8px, 8px, 188px, 64px);\n    }\n    .block-10 {\n        @include block_hollow(12px, 22px, 219px, 11px);\n    }\n    .block-11 {\n        @include block(22px, 22px, 226px, 50px);\n        .inner {\n            border-radius: 50%;\n        }\n    }\n    .block-12 {\n        @include block(18px, 9px, 248px, 26px);\n    }\n    .block-13 {\n        @include block(8px, 8px, 278px, 50px);\n        .inner {    \n            border-radius: 50%;\n        }\n    }\n    .block-14 {\n        @include block_hollow(12px, 22px, 297px, 18px);\n    }\n    .block-15 {\n        @include block(9px, 27px, 307px, 48px);\n    }\n}\n\nbody {\n    background-color: #28DAD4;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    font-family: 'Roboto', sans-serif;\n}\na {\n    cursor: url(https://greghub.github.io/coloron/public/svg/cursor.svg), pointer;\n    &:focus, &:active {\n    cursor: url(https://greghub.github.io/coloron/public/svg/cursor-tap.svg), pointer;\n    }\n}\n.container {\n    position: fixed;\n    left: 0;\n    top: 0;\n    height: 100%;\n    width: 100%;\n}\n.waves, .mounts {\n    position: absolute;\n    width: 100%;\n    left: 0;\n    bottom: 0;\n}\n.waves div, .mounts div {\n    position: absolute;\n    width: 100%;\n}\n.clouds {\n    position: absolute;\n    width: 100%;\n    left: 0;\n    top: 77px;\n    height: 151px;\n    background: url(https://greghub.github.io/coloron/public/svg/clouds.svg) repeat-x;\n    background-position-x: 170px; \n}\n.top_wave {\n    background: url(https://greghub.github.io/coloron/public/svg/top_wave.png) repeat-x 0 -1px;\n    height: 35px;\n    bottom: 0;\n    z-index: 10001;\n}\n.wave1 {\n    background: url(https://greghub.github.io/coloron/public/svg/wave1.svg) repeat-x;\n    height: 150px;\n    bottom: 0;\n    z-index: 23;\n}\n.wave2 {\n    background: url(https://greghub.github.io/coloron/public/svg/wave2.svg) repeat-x;\n    height: 180px;\n    bottom: 30px;\n    z-index: 22;\n}\n.wave3 {\n    background: url(https://greghub.github.io/coloron/public/svg/wave3.svg) repeat-x;\n    height: 180px;\n    bottom: 90px;\n    z-index: 21;\n}\n.wave4 {\n    background: url(https://greghub.github.io/coloron/public/svg/wave4.svg) repeat-x;\n    height: 180px;\n    bottom: 120px;\n    z-index: 20;\n}\n.mount1 {\n    background: url(https://greghub.github.io/coloron/public/svg/mount1.svg) repeat-x;\n    height: 150px;\n    bottom: 280px;\n    z-index: 11;\n}\n.mount2 {\n    background: url(https://greghub.github.io/coloron/public/svg/mount2.svg) repeat-x;\n    height: 150px;\n    bottom: 290px;\n    z-index: 10;\n}\n.noise {\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    z-index: 1010;\n    background: url(https://greghub.github.io/coloron/public/svg/noise.png);\n}\n.glow {\n    position: absolute;\n    left: -350px;\n    top: -350px;\n    width: 800px;\n    height: 800px;\n    background-color: rgba(81, 237, 200, 0.34);\n    border-radius: 50%;\n    box-shadow: 0 0 100px 100px rgba(81, 237, 200, 0.34);\n    z-index: 1010;\n}\n.sun {\n    position: relative;\n    left: 50%;\n    top: 50%;\n    width: 1px;\n    height: 1px;\n    background-color: rgba(255, 227, 69, 1);\n    border-radius: 50%;\n    box-shadow: 0 0 32px 32px rgba(255, 227, 69, 1), \n                0 0 150px 150px rgba(103, 244, 210, 0.4);\n}\n.small-glow {\n    z-index: 99;\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    position: absolute;\n    background-color: rgba(255, 255, 255, 0.34);\n    box-shadow: 0 0 1px 1px rgba(255, 255, 255, 0.34);\n}\n.small-glow.yellow {\n    background-color: rgba(255, 227, 69, 0.34);\n    box-shadow: 0 0 4px 4px rgba(255, 227, 69, 0.34);\n}\n.sticks {\n    z-index: 1011;\n    outline: none;\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n}\n.stick {\n    height: 362px;\n    width: 90px;\n    border-radius: 14px;\n    background-image: url(https://greghub.github.io/coloron/public/svg/noise.png);\n    position: relative;\n    overflow: hidden;\n    float: left;\n    margin-right: 90px;\n    transition: background-color 0.4s ease;\n    cursor: url(https://greghub.github.io/coloron/public/svg/cursor.svg), pointer;\n    &:focus, &:active {\n        cursor: url(https://greghub.github.io/coloron/public/svg/cursor-tap.svg), pointer;\n    }\n}\n.stick.red {\n    background-color: #FF4571;\n}\n.stick.yellow {\n    background-color: #FFD145;\n}\n.stick.purple {\n    background-color: #8260F6;\n}\n.stick.inactive {\n    background-color: #4C4660;\n}\n.ball, .ball-demo {\n    background: url(https://greghub.github.io/coloron/public/svg/ball.svg) right bottom;\n    background-size: 64px 64px;\n    width: 53px;\n    height: 53px;\n    z-index: 1011;\n    background-color: #FF4571;\n    border-radius: 50%;\n}\n.ball {\n    margin-bottom: 250px;\n}\n.controls {\n    z-index: 999999;\n    position: relative\n}\n.game-full-flex {\n    position: fixed;\n    display: none; // gets updated to flex with JS\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    z-index: 9998;\n}\n.start-game {\n    .start-game-top {\n        min-height: 20%;\n        .play-full-page {\n            display: none;\n            border: 3px solid #fff;\n            border-radius: 100px;\n            color: #fff;\n            width: 260px;\n            height: 50px;\n            font-size: 28px;\n            text-align: center;\n            font-weight: 900;\n            letter-spacing: -1px;\n            line-height: 52px;\n            text-decoration: none;\n            text-transform: uppercase;\n            margin-top: 24px;\n            &:hover {\n                opacity: 0.7;\n            }\n        }\n    }\n    .logo-holder {\n        width: 513px;\n        height: 162px;\n        background-color: #4C4660;\n        border: 4px solid #FF4571;\n        border-radius: 68px;\n        text-align: center;\n        margin-top: -10%;\n        .logo {\n            color: #fff;\n            text-transform: uppercase;\n            font-weight: 900;\n            font-size: 100px;\n            letter-spacing: -0.1em;\n            margin-top: 10px;\n            margin-bottom: 4px;\n            text-align: center;\n            span {\n                margin-left: -8px;\n                margin-right: -8px;\n            }\n        }\n        .play-button {\n            display: inline-block;\n            background-color: #FF4571;\n            border: 4px solid #fff;\n            border-radius: 100px;\n            color: #fff;\n            width: 200px;\n            height: 56px;\n            font-size: 42px;\n            text-align: center;\n            font-weight: 900;\n            letter-spacing: -3px;\n            line-height: 56px;\n            text-decoration: none;\n            &:hover {\n                background-color: lighten(#FF4571, 5%);\n            }\n        }\n        .hint {\n            color: #fff;\n            font-size: 20px;\n            span {\n                color: #FF4571;\n            }\n        }\n    }\n    .how-to-play {\n        display: flex;\n        justify-content: space-around;\n        width: 100%;\n        .section-1, .section-3 {\n            flex: 1;\n            .content {\n                justify-content: center;\n            }\n        }\n        h4 {\n            color: #fff;\n            font-weight: 400;\n            font-size: 22px;\n            text-align: center;\n        }\n        .content {\n            height: 200px;\n            position: relative;\n            display: flex;\n            justify-content: space-around;\n        }\n        .bar {\n            width: 60px;\n            border-radius: 7px;\n            margin-top: auto;\n            transition: background-color 0.4s ease;\n            &.bar-1 {\n                height: 180px;\n                background: #FF4571;\n            }\n            &.bar-2 {\n                height: 120px;\n                background: #FFD145;\n            }\n            &.bar-3 {\n                height: 150px;\n                background: #4C4660;\n            }\n        }\n        .section-2 {\n            .bar {\n                cursor: url(https://greghub.github.io/coloron/public/svg/cursor.svg), pointer;\n                &:focus, &:active {\n                    cursor: url(https://greghub.github.io/coloron/public/svg/cursor-tap.svg), pointer;\n                }\n            }\n        }\n        .section-3 {\n            .ball-demo {\n                background-color: #815FF8;\n            }\n            .bar-1 {\n                height: 120px;\n                background-color: #815FF8;\n            }\n        }\n    }\n}\n.stop-game {\n    justify-content: center;\n    .score-container {\n        background-color: #4C4660;\n        width: 433px;\n        height: 386px;\n        border-radius: 38px;\n        text-align: center;\n        h1 {\n            color: #fff;\n            text-transform: uppercase;\n            letter-spacing: -0.1em;\n            margin-top: 20px;\n            margin-bottom: 4px;\n            font-size: 64px;\n        }\n        .final-score {\n            color: #FFE345;\n            font-weight: 900;\n            font-size: 130px;\n            letter-spacing: -6px;\n            line-height: 110px;\n        }\n        .result {\n            color: #FF4571;\n            text-transform: uppercase;\n            font-weight: 700;\n            font-size: 30px;\n        }\n        h4 {\n            color: #fff;\n            margin-top: 12px;\n        }\n        .tweet {\n            background: #fff;\n            padding: 8px 20px;\n            border-radius: 4px;\n            color: #55ACEE;\n            text-decoration: none;\n            font-size: 18px;\n            line-height: 24px;\n            display: inline-block;\n            &:hover {\n                background-color: #55ACEE;\n                color: #fff;\n            }\n            i {\n                font-size: 24px;\n                top: 2px;\n                right: 2px;\n                position: relative;\n            }\n        }\n        .play-again {\n            background-color: #FF4571;\n            border: 2px solid #fff;\n            color: #fff;\n            text-decoration: none;\n            text-transform: uppercase;\n            font-weight: 900;\n            letter-spacing: -1px;\n            font-size: 26px;\n            padding: 6px 24px;\n            border-radius: 22px;\n            margin: 6px 4px;\n            display: inline-block;\n            &:hover {\n                background-color: lighten(#FF4571, 5%);\n            }\n        }\n        .main-menu {\n            background-color: #44BFA3;\n            border: 2px solid #fff;\n            color: #fff;\n            text-decoration: none;\n            text-transform: uppercase;\n            font-weight: 900;\n            letter-spacing: -1px;\n            font-size: 26px;\n            padding: 6px 24px;\n            border-radius: 22px;\n            margin: 6px 4px;\n            display: inline-block;\n            &:hover {\n                background-color: lighten(#44BFA3, 5%);\n            }\n        }\n    }\n}\n.scene {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    position: fixed;\n    z-index: 9997;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    .ball-holder {\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        justify-content: flex-end;\n        padding-left: 558px;\n    }\n    .score {\n        position: fixed;\n        right: 54px;\n        top: 20px;\n        color: #33485F;\n        font-size: 90px;\n        font-weight: 900;\n        letter-spacing: -0.1em;\n    }\n    .learn-to-play {    \n        z-index: 9999;\n        display: inline-block;\n        text-align: center;\n        position: relative;\n        top: 20%;\n        font-size: 48px;\n        color: rgba(255,255,255,0.85);\n        font-weight: 700;\n        letter-spacing: -2px;\n        opacity: 0;\n    }\n}\n\n.splash {\n  display: none;\n}\n\n@media print {\n  .splash {\n    display: block;\n    position: fixed;\n    z-index: 99999;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: #28DAD4;\n    background-image: url(https://greghub.github.io/coloron/public/images/coloron-image.png);\n    background-size: auto 100%;\n    background-repeat: no-repeat;\n    background-position: center;\n  } \n}\n\n.nominee {\n  position: fixed;\n  right: 0;\n  top: 0;\n  z-index: 9999;\n}</style>"}